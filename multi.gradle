buildscript {
    repositories {
        maven {
            url "https://maven.aliyun.com/repository/public/"
        }
        maven {
            url "https://maven.aliyun.com/repository/central"
        }
        mavenCentral()
    }
}


allprojects {
    repositories {
        maven {
            url "https://maven.aliyun.com/repository/public/"
        }
        maven {
            url "https://maven.aliyun.com/repository/central"
        }
        mavenCentral()
    }
}

ext {
    lang3Version = "3.12.0"
    slf4jVersion = "1.7.36"
    caffeineVersion = "3.0.3"
    springBootVersion = "2.7.1"
    springCloudVersion = "2021.0.1"
    alibabaCloudVersion = "2021.0.1.0"
    huToolVersion = "5.8.4"
    swaggerVersion = "3.0.0"
    mockitoVersion = "3.12.4"
    junitBomVersion = "5.8.2"
    jacksonVersion = "2.13.3"
    guavaVersion = "31.1-jre"
    lombokVersion = "1.18.24"
}
subprojects { Project project ->
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'signing'

    sourceCompatibility = 11
    targetCompatibility = 11

    spotless {
        java {
            googleJavaFormat('1.8').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
        }
    }

    dependencies {
        implementation("org.apache.commons:commons-lang3:${lang3Version}")
        implementation "com.google.guava:guava:${guavaVersion}"
        implementation "cn.hutool:hutool-core:${huToolVersion}"
        implementation "cn.hutool:hutool-extra:${huToolVersion}"


        implementation("org.slf4j:slf4j-api:${slf4jVersion}")
        testImplementation(platform("org.junit:junit-bom:${junitBomVersion}"))
        testImplementation("org.junit.jupiter:junit-jupiter")
        testImplementation("org.mockito:mockito-core:${mockitoVersion}")
        testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
        testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    }

    test {
        useJUnitPlatform()
    }
    println "start ${project.name}"
    group = "com.donphds.${project.name}"
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    ext {
        isReleasedVersion = !project.parent.version.toString().endsWith("-alpha")
    }
    publishing {
        // 定义发布什么
        publications {
            mavenJava(MavenPublication) {
                 groupId = "io.github.donphds"
                // version = project.version
                // groupId,artifactId,version，如果不定义，则会按照以上默认值执行
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = "${project.name}"
                    url = 'https://github.com/donphds/donphds-tools.git'
                    scm {
                        connection = 'scm:git:git://github.com/donphds/donphds-tools.git'
                        developerConnection = 'scm:git:ssh://github.com/donphds/donphds-tools.git'
                        url = 'https://github.com/donphds/donphds-tools.git'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'donphds'
                            name = 'donphds'
                            email = 'donphds@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username findProperty("OSSRH_USER") ?: System.getenv("OSSRH_USER")
                    password findProperty("OSSRH_PASSWD") ?: System.getenv("OSSRH_PASSWD")
                }
                if (!isReleasedVersion) {
                    url "https://oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }
    signing {
        sign publishing.publications.mavenJava
    }


    javadoc {
        // <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        // 防止本地打开中文乱码
        options.addStringOption("charset", "UTF-8")
    }

}








